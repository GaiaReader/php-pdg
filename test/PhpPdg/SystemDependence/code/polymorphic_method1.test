<?php

class A {
	public function foo() {}
}

class B extends A {}

$b = new B();
$b->foo();
-----
Script /foo/bar/baz.php[{main}]:
    Entry Node: #0 ENTRY
    Return Nodes:
        #1 Op[Terminal_Return]@-1
    Pdg:
        Nodes:
            #0 ENTRY
            #2 Op[Stmt_Class]@3
            #3 Op[Stmt_ClassMethod]@4
            #4 Op[Stmt_Class]@7
            #5 Op[Expr_New]@9
            #6 Op[Expr_Assign]@9
            #7 Op[Expr_MethodCall]@10
            #1 Op[Terminal_Return]@-1
        Edges:
            #0 ENTRY =={"type":"control"}=> #2 Op[Stmt_Class]@3
            #0 ENTRY =={"type":"control"}=> #4 Op[Stmt_Class]@7
            #0 ENTRY =={"type":"control"}=> #5 Op[Expr_New]@9
            #0 ENTRY =={"type":"control"}=> #6 Op[Expr_Assign]@9
            #0 ENTRY =={"type":"control"}=> #7 Op[Expr_MethodCall]@10
            #0 ENTRY =={"type":"control"}=> #1 Op[Terminal_Return]@-1
            #5 Op[Expr_New]@9 =={"type":"data","operand":"expr"}=> #6 Op[Expr_Assign]@9
            #6 Op[Expr_Assign]@9 =={"type":"data","operand":"var"}=> #7 Op[Expr_MethodCall]@10
Method /foo/bar/baz.php[A::foo]:
    Entry Node: #0 ENTRY
    Return Nodes:
        #8 Op[Terminal_Return]@-1
    Pdg:
        Nodes:
            #0 ENTRY
            #8 Op[Terminal_Return]@-1
        Edges:
            #0 ENTRY =={"type":"control"}=> #8 Op[Terminal_Return]@-1
Graph:
    Nodes:
        #9 Func[/foo/bar/baz.php[{main}]]
        #10 Func[/foo/bar/baz.php[A::foo]]
        #7 Op[Expr_MethodCall]@10
    Edges:
        #9 Func[/foo/bar/baz.php[{main}]] =={"type":"contains"}=> #7 Op[Expr_MethodCall]@10
        #7 Op[Expr_MethodCall]@10 =={"type":"call"}=> #10 Func[/foo/bar/baz.php[A::foo]]