<?php

class A {
	public function foo() {}
}

class B extends A {}

$b = new B();
$b->foo();
-----
Script /foo/bar/baz.php[{main}]:
    Entry Node: #0 ENTRY
    Return Nodes:
        #1 Op Terminal\Return_ @ unknown line -1
    Pdg:
        Nodes:
            #0 ENTRY
            #2 Op Stmt\Class_ @ /foo/bar/baz.php line 3
            #3 Op Stmt\ClassMethod @ /foo/bar/baz.php line 4
            #4 Op Stmt\Class_ @ /foo/bar/baz.php line 7
            #5 Op Expr\New_ @ /foo/bar/baz.php line 9
            #6 Op Expr\Assign @ /foo/bar/baz.php line 9
            #7 Op Expr\MethodCall @ /foo/bar/baz.php line 10
            #1 Op Terminal\Return_ @ unknown line -1
        Edges:
            #5 Op Expr\New_ @ /foo/bar/baz.php line 9 =={"type":"data"}=> #6 Op Expr\Assign @ /foo/bar/baz.php line 9
            #6 Op Expr\Assign @ /foo/bar/baz.php line 9 =={"type":"data"}=> #7 Op Expr\MethodCall @ /foo/bar/baz.php line 10
Method /foo/bar/baz.php[A::foo]:
    Entry Node: #0 ENTRY
    Return Nodes:
        #8 Op Terminal\Return_ @ unknown line -1
    Pdg:
        Nodes:
            #0 ENTRY
            #8 Op Terminal\Return_ @ unknown line -1
Graph:
    Nodes:
        #9 Func /foo/bar/baz.php[{main}]
        #10 Func /foo/bar/baz.php[A::foo]
        #7 Op Expr\MethodCall @ /foo/bar/baz.php line 10
    Edges:
        #9 Func /foo/bar/baz.php[{main}] =={"type":"contains"}=> #7 Op Expr\MethodCall @ /foo/bar/baz.php line 10
        #7 Op Expr\MethodCall @ /foo/bar/baz.php line 10 =={"type":"call"}=> #10 Func /foo/bar/baz.php[A::foo]